we need to read imu data in python. Usually, we take input from the hardware, but since we have already initialised the values, we just need to update them and publish them.
IMU has 3 components, the gyroscope, the accelerometer and the magnetometer. This leads to a 9 axis motion sensor. We only work with angular velocity and linear acceleration for this one.
For changing the values of the two, we first run a while loop, with the condition that ros is not shut down.
we also need a function that reads the time. 
now, within this while loop, we split each of the components within the 3 axes. After we've run this program once, we update the value of the variables in one of the axes for both of them.
We then publish it using the ros topic for linear acceleration and angular velocity. I referred to this video: https://youtu.be/20htSO0z-F4
I have written this program, but I'm not able to proceed further:(I used this- https://github.com/erlerobot/ros_erle_imu/blob/master/scripts/imu.py

#!/usr/bin/env python

import spidev
import time
import rospy
import math
import numpy as np
from time import time
from MPU9250 import MPU9250
from sensor_msgs.msg import Imu

def talker():
	pub = rospy.Publisher('imu', Imu, queue_size=10)
	rospy.init_node('ros_erle_imu', anonymous=True)
	rate = rospy.Rate(10)

	imu = MPU9250()
	imu.initialize()
	gx=gy=gz=0 
	ax= 2.5
	ay=az=0 
	msg = Imu()
	
	while not rospy.is_shutdown():

		imu.read_acc()
		
		msg.header.stamp = rospy.get_rostime()

		# m9a, m9g, m9m = imu.getMotion9()


		#----------update IMU
		# ax = 
		# ay = m9a[1]
		# az = m9a[2]
		# gx = m9g[0]
		# gy = m9g[1]
		# gz = m9g[2]
		# q0 = 0.0 #W
		# q1 = 0.0 #X
		# q2 = 0.0 #Y
		# q3 = 0.0 #Z
		
	

		#Fill message
		# msg.orientation.x = q1
		# msg.orientation.y = q2
		# msg.orientation.z = q3
		# msg.orientation.w = q0
		# msg.orientation_covariance[0] = q1 * q1
		# msg.orientation_covariance[0] = q2 * q2
		# msg.orientation_covariance[0] = q3 * q3		

		msg.angular_velocity.x = gx
		msg.angular_velocity.y = gy
		msg.angular_velocity.z = gz
		# msg.angular_velocity_covariance[0] = m9g[0] * m9g[0]
        # 	msg.angular_velocity_covariance[4] = m9g[1] * m9g[1]
        # 	msg.angular_velocity_covariance[8] = m9g[2] * m9g[2]
		
		msg.linear_acceleration.x = ax
		msg.linear_acceleration.y = ay
		msg.linear_acceleration.z = az
		# msg.linear_acceleration_covariance[0] = m9a[0] * m9a[0]
		# msg.linear_acceleration_covariance[4] = m9a[1] * m9a[1]
		# msg.linear_acceleration_covariance[8] = m9a[2] * m9a[2]
		
		pub.publish(msg)
		gx+=0.1
		ax=2.5
		ay+=1

		rate.sleep()

if __name__ == '__main__':
	try:
        	talker()
  	except rospy.ROSInterruptException:
        	pass

